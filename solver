#!/bin/bash

declare -a blacklist
declare -a report
pkgm=''
distro=''
ver='0.1'

print_report ()
{
	for i in "${report[@]}"; do
		echo -e "$i"
	done	
}

options () 
{
	sel=$1

	help=$(cat <<-TEXT
	Options:
	 -i, --interactive              interactive mode (menu)

	 -a, --all                      run all tests  
	 -b, --bluetooth                check for Bluetooth
	 -t, --touchpad                 check for touchpad
	 -w, --wireless                 wifi tests
	 -e, --ethernet                 ethernet tests
	 -p, --performance              check why computer can be running slow
	 -P, --printer                  printer tests
	 -s, --sound                    sound tests 

	 -h, --help                     display this help
	 -V, --version                  display version
TEXT
)
	case $sel in
	-V|--version)
	  	echo "$(basename $0) version $ver"
	  	return
		;;
	-h|--help)
	  echo -e "$help"
	  return
	  ;;
	-i|--interactive)
		menu
		# return
		;;  
	-a|-all)
		performance
		sound
		bluetooth
		touchpad
		ethernet
		wireless
		;;
	-p|--performance)
		performance
		;;			
	-s|--sound)
		sound
		;;
	-b|--bluetooth)
		bluetooth
		;;
	-t|--touchpad)
		touchpad
		;;		
	-e|--ethernet)
		ethernet
		;;
	-w|wireless)
		wireless
		;;		
	*)
	  echo -e "$(basename $0): unrecognized option '$sel'\nTry '$(basename $0) --help' for more information";
	  return
	  ;;
	esac

	print_report
}


key () {
	echo
	for i in "${report[@]}"; do
    	echo $i
	done
	echo
	echo "Presiona enter para continuar..."
	read tecla
}

# MENU
menu () {
	while :
	do
		clear
		echo " Escoja una opcion "
		echo "==================="
		echo "1. Verificar problemas de rendimiento"
		echo "2. Verificar touchpad"
		echo "3. Problemas con ethernet"
		echo "4. Problemas con WiFi"
		echo "5. Problemas con bluetooth"
		echo "6. Problemas de sonido"
		echo "7. Salir del programa"
		echo -n "Seleccione una opcion [1 - 7] "
		read opcion
		echo
			case $opcion in
			1) 	performance;
				key;;
			2) 	touchpad;
				key;;
			3) 	ethernet;
				key;;
			4) 	wireless;
				key;;
			5)	bluetooth;
				key;;
			6)	sound;
				key;;
			7) 	exit 1;
				key;;
			*) 	echo "'$opcion' es una opcion invalida.";
				key;;
			esac
		unset report[@] # Reinicia variable
	done
}

push () {
	report=("${report[@]}" "$1")
}

function in_array() {
  local x

  entry=$1
  shift 1
  array=( "$@" )
  [ -z "${array}" ] && return 1
  [ -z "${entry}" ] && return 1
  
  for x in ${array[@]}; do
    [ "${x}" == "${entry}" ] && return 0
  done
  
  return 1
}


# Sistema de paquetes utilizado, distribución, etc
describe () {	
	if [[ ! -z $(which apt) ]]; then
		pkgm='apt'
		else 
			if [[ ! -z $(which dnf) ]]; then
				pkgm='dnf'	
			else
				if [[ ! -z $(which pacman) ]]; then
					pkgm='pacman'
				else
					if [[ ! -z $(which emerge) ]]; then
						pkgm='emerge'	
					fi	
				fi	
			fi	
	fi 	

	distro=`(cat /etc/*-release | egrep '^ID=' | cut -c4-) 2>/dev/null`
}

# Drivers en lista negra
blacklist () {
	blacklist=$(cat /etc/modprobe.d/*blacklist* | egrep '^blacklist ' | cut -d' ' -f2)
}

#
### Solvers
#

# --OK
touchpad () {

	# Parsear xinput buscando "Touchpad"
	[[ ! -z `which xinput` && -z $(xinput | grep -i touchpad) ]] && push "Touchad no detectado"

	shopt -s nocasematch
	case $XDG_CURRENT_DESKTOP in
	     *gnome*) # probar
				enabled=$(gsettings get org.gnome.desktop.peripherals.touchpad touchpad-enabled)

				if [[ $enabled == "false" ]]; then
					echo "Habilitando Touchpad (..)"
					gsettings set org.gnome.desktop.peripherals.touchpad send-events enabled
					sudo modprobe -r psmouse; sleep 1; sudo modprobe psmouse
				fi
	          	;;
	     *cinnamon*)      
				enabled=$(gsettings get org.cinnamon.settings-daemon.peripherals.touchpad touchpad-enabled)

				if [[ $enabled == "false" ]]; then
					echo "Habilitando Touchpad (..)"
					gsettings set org.cinnamon.settings-daemon.peripherals.touchpad touchpad-enabled true
					sudo modprobe -r psmouse; sleep 1; sudo modprobe psmouse
				fi
	          	;;

	    *)

			if [[ ! -z `which xinput` ]]; then
				local id=$(xinput list | egrep -i 'Touchpad|Synaptics' | awk '{ print $6 }' | cut -c4-6)
				local enabled=$(xinput list-props $id | grep Device\ Enabled | awk '{print $4}')

				if [[ $enabled -eq 0 ]]; then
					echo "Intentando habilitar Touchpad (..)"
					xinput enable "$id"
					xinput set-prop "$id" "Device Enabled" 1
					sudo modprobe -r psmouse; sleep 1; sudo modprobe psmouse
				fi

				# Vuelvo a chequear ...
				enabled=$(xinput list-props $id | grep Device\ Enabled | awk '{print $4}')
				if [[ $enabled -eq 0 ]]; then
					push "Touchpad deshabilitado - sin solucionar"
				fi	
			fi

			(apt list --installed  | grep xserver-xorg-input-synaptics) >/dev/null 2>&1
			if [[ $? -eq 0 ]]; then
				synclient TouchpadOff=0
			fi	
    		;;      	
	esac
	shopt -u nocasematch

	# Parsear la linea GRUB_CMDLINE_LINUX_DEFAULT de /etc/default/grub en búsqueda de acpi=off por ejemplo
	(grep GRUB_CMDLINE_LINUX_DEFAULT /etc/default/grub | egrep '(acpi=off|acpi_os=!)') >/dev/null 2>&1
	[[ $? -eq 0 ]] && push "ACPI fue deshabilitado: $(grep GRUB_CMDLINE_LINUX_DEFAULT /etc/default/grub)"
}


# -- OK
bluetooth () {
	# Está bloqueado
	local soft_locked=$(rfkill | grep bluetooth | awk '{ print $4 }')
	local hard_locked=$(rfkill | grep bluetooth | awk '{ print $5 }')

	[[ "$soft_locked" != "unblocked" ]] && push "Hay un bluetooth bloqueado por soft"
	[[ "$hard_locked" != "unblocked" ]] && push "Hay un bluetooth bloqueado por hard"
}

# --OK
sound () {
	local hardware=$(lspci -v | grep -i -A7 audio  | grep -i 'Subsystem' | cut -d':' -f2)
	local driver_en_uso=$(lspci -v | grep -i -A7 audio  | grep 'Kernel driver in use' | cut -d':' -f2)
	local drivers=$(lspci -v | grep -i -A7 audio  | grep 'Kernel modules' | cut -d':' -f2)

	# No hay driver en uso?
	if [[ -z "$driver_en_uso" ]]; then
		push "Audio: no hay driver (drivers disponibles: $drivers, device: $hardware)"

		# Verifico que ningún driver esté blacklisted
		for driver in "${drivers[@]}"; do
			in_array "$driver" "${blacklist[@]}"
			[[ $? -eq 0 ]] && push "Audio: $driver está en blacklist"
		done	
	fi

	# muted?
	muted=$(pacmd list-sinks | awk '/muted/ { print $2 }')
	(grep yes <<< $(echo $muted)) >/dev/null
	if [[ $? -eq 0 ]]; then
		echo "Audio: hay un dispositivo 'silenciado', solucionando (..)"
		amixer sset Master unmute >/dev/null
		amixer sset Speaker unmute >/dev/null
		amixer sset Headphone unmute >/dev/null
	fi	

	# aplicar algo de esto?
	# https://askubuntu.com/questions/1029502/no-audio-on-ubuntu-18-04
	# https://help.ubuntu.com/community/SoundTroubleshootingProcedure
	# https://zillowtech.com/ubuntu-no-sound.html
}

# -- OK
performance () {
	local mem_ava=$(cat /proc/meminfo | grep MemAvailable | awk '{print $2}')	

	local free_space_root=$(df -h | awk '
		$6=="/" {
			print $4
		}
	')

	local free_space_root_h=$free_space_root

	free_space_root=${free_space_root/K/000}
	free_space_root=${free_space_root/M/000000}
	free_space_root=${free_space_root/G/000000000}
	free_space_root=${free_space_root/T/000000000000}

	# menos de 4Gb libres en /
	[[ $free_space_root -le 4000000000 ]] && push "Poco espacio ($free_space_root_h) en partición root"
	
	# Menos de 150Kb libres de RAM
	[[ $mem_ava -le 150000 ]] && push "Memoria disponible insuficiente ($mem_ava kb)"
}


# Detectar errores de ethernet
ethernet () {
	interfaces=$(ls /sys/class/net | grep '^e.*')

	local downs=0
	for interface in $interfaces; do
		if [[ -z $(sudo ip address show $interface | grep "UP>") ]]; then
			echo "Interfaz $interface está apagada, encendiendo (..)"
			(( downs++ ))
			sudo ip link set "$interface" up 2>/dev/null
			[[ $? -ne 0 ]] && push "Interfaz $interface no se pudo levantar"
		fi
	done	
	
	# Esto también va acá? | LEO: Si, es lo mismo que sea para ethernet que wifi
	if [[ $downs -gt 0 ]]; then
		if [[ ! -z $(systemctl list-unit-files | grep network-manager | grep enabled) ]]; then 
			echo "Re-iniciando NetworkManager (..)"
			sudo service network-manager restart
			sleep 10
		fi	
	fi	

	#si tiene conexion al medio (cable) hacer:
	for interface in $interfaces; do
		errora=0
		if [[ $(sudo ip address show $interface | grep "LOWER_UP>") ]]; then
			# Tiene IP
			[[ -z $(ip address show $interface | grep "inet " | awk '{print $2}') ]] && push "no se encontro dirección IP para la interfaz: $interface" && (( errora++ ))

			# IP/CIDR
			maskara=$(ip address show $interface | grep "inet " | awk '{print $2}') # Obtiene IP/CIDR
			maskara=${maskara:(-2)} # Corta el string, dejando los dós digitos de la derecha
			[[ maskara -eq 0 ]] && push "no se encontro mascara de red para la interfaz: $interface" && (( errora++ ))

			# Gateway
			[[ -z $(ip route show |grep default | awk '{print $3}') ]] && push "no se encontro puerta de enlace para la interfaz: $interface"
			gateway=$(ip route show |grep default | awk '{print $3}') # Guardando Gateway

			# DNS
			[[ -z $(cat /etc/resolv.conf | grep nameserver -m 1 | awk '{print $2}') ]] && push "No se encontraron servidores DNS en '/etc/resolv.conf' "
			dns=$(ip route show |grep default | awk '{print $3}') # Guardando DNS

			# si errora es igual a 0 hace ping contra el router
			if [[ $errora -eq 0 ]]; then
				echo "Probando conexion, espere..."
				# ping Gateway
				myping=$(ping -c3 $gateway | grep "3 packets transmitted" | awk '{print $4}')
				[[ myping -ne '3' ]] && push "no hay conexion con el router" || push "conexion exitosa con el router"
				# Ping DNS
				myping=$(ping -c5 $dns | grep "5 packets transmitted" | awk '{print $4}')
				[[ myping -ne '5' ]] && push "no hay conexion con el servidor DNS" || push "conexion exitosa con el servidor DNS"
			fi

		else
			push "Cable desconectado en interfaz: $interface"
		fi
	done
}

# Detectar errores de wifi
wireless () {

	# drivers

	# lspci -k | grep -C2 -i wireless

	# lsusb -t | grep -i Wireless
	#
	# sino existe el driver se ve así:
	#  |__ Port 6: Dev 4, If 1, Class=Video, Driver=, 480M

	interfaces=$(cat /proc/net/dev | grep -o w[a-z0-9]*: | cut -d':' -f1)
	interfaces_up=$(cat /proc/net/wireless | awk '/:/  {print $1}' | cut -d':' -f1)

	[[ "${#interfaces[@]}" -eq 0 ]] && push "No se encontraron interfaces de red wireless"

	local downs=0
	for interface in $interfaces; do
		in_array $interface "${interfaces_up[@]}"
		if [[ $? -ne 0 ]]; then
			echo "Interfaz $interface está apagada, encendiendo (..)"
			(( downs++ ))
			sudo ip link set "$interface" up 2>/dev/null
			[[ $? -ne 0 ]] && push "Interfaz $interface no se pudo levantar"
		fi
	done	

	if [[ $downs -gt 0 ]]; then
		if [[ ! -z $(systemctl list-unit-files | grep network-manager | grep enable ) ]]; then
			echo "Re-iniciando NetworkManager (..)"
			sudo service network-manager restart
			sleep 10
		fi	
	fi

	#si tiene conexion al medio (aire) hacer:
	for interface in $interfaces; do
		errora=0
		if [[ $(sudo ip address show $interface | grep "LOWER_UP>") ]]; then
			# Tiene IP
			[[ -z $(ip address show $interface | grep "inet " | awk '{print $2}') ]] && push "No se encontro dirección IP para la interfaz: $interface" && (( errora++ ))

			# IP/CIDR
			maskara=$(ip address show $interface | grep "inet " | awk '{print $2}') # Obtiene IP/CIDR
			maskara=${maskara:(-2)} # Corta el string, dejando los dós digitos de la derecha
			[[ maskara -eq 0 ]] && push "No se encontro mascara de red para la interfaz: $interface" && (( errora++ ))

			# Gateway
			[[ -z $(ip route show |grep default | awk '{print $3}') ]] && push "No se encontro puerta de enlace para la interfaz: $interface"
			gateway=$(ip route show |grep default | awk '{print $3}') # Guardando Gateway

			# DNS
			[[ -z $(cat /etc/resolv.conf | grep nameserver -m 1 | awk '{print $2}') ]] && push "No se encontraron servidores DNS en '/etc/resolv.conf' "
			dns=$(ip route show |grep default | awk '{print $3}') # Guardando DNS

			# si errora es igual a 0 hace ping contra router y DNS
			if [[ $errora -eq 0 ]]; then
				echo "Probando conexion, espere..."
				# ping Gateway
				myping=$(ping -c3 $gateway | grep "3 packets transmitted" | awk '{print $4}')
				[[ myping -ne '3' ]] && push "No hay conexion con el router" || push "Conexion exitosa con el router"
				# Ping DNS
				myping=$(ping -c5 $dns | grep "5 packets transmitted" | awk '{print $4}')
				[[ myping -ne '5' ]] && push "No hay conexion con el servidor DNS" || push "Conexion exitosa con el servidor DNS"
			fi

		else
			push "Sin conexión WiFi en: $interface"
		fi
	done
}

describe ; [[ -z $pkgm ]] && push "Package management desconocido"
blacklist


options $1